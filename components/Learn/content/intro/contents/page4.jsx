import React, { Component } from 'react';
import {
    View,
    Button,
    Text,
    Image,
    TouchableOpacity,
    FlatList
} from 'react-native';
import { ScrollView } from 'react-native-gesture-handler';

// import stylesheet.
import styles from '../styles';

export default class page4 extends Component {
    render() {
        let style = styles.PageStyle
        return (
            <View style={style.containerStyle}>
                <Text style={style.titleStyle}>How does a Trapdoor Knapsack work?</Text>

                <Text style={style.contentStyle}>
                    Trapdoor knapsack is basically formed around 3 different key information, the private key, the multiplier and the modulus
                    {"\n\n"}
                    Everything else is derived from these 3 pieces of information.
                    {"\n\n"}
                    The <Text style={style.bold}>private key</Text> is a superincreasing knapsack to ensure there will only be one answer to a ciphertext.
                    {"\n"}
                    The <Text style={style.bold}>modulus</Text> chosen is a random integer <Text style={style.underline}>larger than the sum of elements in the knapsack</Text>. This ensures the uniqueness of the ciphertext and plaintext pairs.
                    {"\n"}
                    The <Text style={style.bold}>multiplier</Text> chosen is a <Text style={style.underline}>co-prime</Text> to the modulus, so that a <Text style={style.underline}>multiplicative inverse</Text> can be found.
                    {"\n\n"}
                    These three are kept as the secret key by the owner and not distributed.
                    {"\n\n"}
                    A public key is generated by multiplying <Text style={style.bold}>each</Text> element of the superincreasing knapsack with the multiplier and modulus to get a <Text style={style.bold}>difficult knapsack</Text>.
                    {"\n"}
                    Since the public key is no longer in a superincreasing sequence, there are <Text style={style.underline}>multiple solutions</Text> to a single ciphertext therefore making it <Text style={style.underline}>difficult to decipher</Text>.
                    {"\n\n"}
                    This <Text style={style.bold}>public key</Text> is then given to a person who wishes to send an <Text style={style.bold}>encrypted text</Text> to the owner.
                    {"\n"}
                    This person will then <Text style={style.bold}>encrypt</Text> his message using the <Text style={style.bold}>public key</Text> and send it back to the owner.
                    {"\n"}
                    The owner with the <Text style={style.bold}>private key</Text> will be able to decrypt and get the original message.
                    {"\n\n"}
                    A detailed example will be given as you progress further.
                    {"\n"}
                </Text>
            </View>
        )
    }
}
