import React, { Component } from 'react';
import { View, Text } from 'react-native';

import AlertPopUp from '../../../../Common/AlertPopUp';
import Info from '../../../../../assets/images/InfoIcon.png';
// import stylesheet.
import styles from '../styles';

export default class page6 extends Component {
  constructor(props) {
    super(props);

    // local state not affected by redux
    this.state = {
      showDifficultKnapsackInfoPopUp: false,
      showPersonInfoPopUp: false,
      showSuperIncreasingInfoPopUp: false,
    };
  }

  superIncreasingInfoPopUp = () => {
    return (
      <>
        <Text style={styles.PageStyle.popUpTextStyle}>
          This refers to the set of <Text style={styles.PageStyle.privateKey}>private keys</Text>.
        </Text>
      </>
    );
  };

  difficultKnapsackInfoPopUp = () => {
    return (
      <>
        <Text style={styles.PageStyle.popUpTextStyle}>
          Since a <Text style={styles.PageStyle.publicKey}>public key</Text> is no longer in a{' '}
          <Text style={styles.PageStyle.superIncreasingKnapsack}>superincreasing sequence</Text>, there are multiple
          solutions to a single ciphertext therefore making it difficult to decipher.
        </Text>
      </>
    );
  };

  personInfoPopUp = () => {
    return (
      <>
        <Text style={styles.PageStyle.popUpTextStyle}>
          This person will then encrypt his message using the <Text style={styles.PageStyle.publicKey}>public key</Text>{' '}
          and send it back to the owner.
        </Text>
      </>
    );
  };

  render() {
    const { showDifficultKnapsackInfoPopUp, showPersonInfoPopUp, showSuperIncreasingInfoPopUp } = this.state;
    const style = styles.PageStyle;
    return (
      <View style={style.containerStyle}>
        {showSuperIncreasingInfoPopUp ? (
          <AlertPopUp
            icon={Info}
            renderedBlocks={this.superIncreasingInfoPopUp()}
            callback={() => {
              this.setState({ showSuperIncreasingInfoPopUp: false });
            }}
            visibility={showSuperIncreasingInfoPopUp}
          />
        ) : null}
        {showDifficultKnapsackInfoPopUp ? (
          <AlertPopUp
            icon={Info}
            renderedBlocks={this.difficultKnapsackInfoPopUp()}
            callback={() => {
              this.setState({ showDifficultKnapsackInfoPopUp: false });
            }}
            visibility={showDifficultKnapsackInfoPopUp}
          />
        ) : null}
        {showPersonInfoPopUp ? (
          <AlertPopUp
            icon={Info}
            renderedBlocks={this.personInfoPopUp()}
            callback={() => {
              this.setState({ showPersonInfoPopUp: false });
            }}
            visibility={showPersonInfoPopUp}
          />
        ) : null}
        <Text style={style.titleStyle}>Introduction</Text>
        <Text style={style.contentHead}>Trapdoor Knapsack Description</Text>

        <Text style={style.contentStyle}>
          A <Text style={style.publicKey}>public key</Text> is generated by multiplying each element of the{' '}
          <Text
            style={{ ...style.superIncreasingKnapsack, ...style.underline }}
            onPress={() => {
              this.setState({ showSuperIncreasingInfoPopUp: true });
            }}
          >
            superincreasing knapsack
          </Text>{' '}
          with the <Text style={style.multiplier}>multiplier</Text> and <Text style={style.modulus}>modulus</Text> to
          get a{' '}
          <Text
            style={style.links}
            onPress={() => {
              this.setState({ showDifficultKnapsackInfoPopUp: true });
            }}
          >
            difficult knapsack
          </Text>
          .{'\n\n'}
          This <Text style={style.publicKey}>public key</Text> is then given to a{' '}
          <Text
            style={style.links}
            onPress={() => {
              this.setState({ showPersonInfoPopUp: true });
            }}
          >
            person
          </Text>{' '}
          who wishes to send an encrypted text to the owner.
          {'\n\n'}
          The owner with the <Text style={style.privateKey}>private key</Text> will be able to decrypt and get the
          original message.
          {'\n\n'}A detailed example will be given as you progress further.
          {'\n'}
        </Text>
      </View>
    );
  }
}
