import React, { Component } from 'react';
import {
    View,
    Button,
    Text,
    Image,
    TouchableOpacity,
    FlatList
} from 'react-native';

import AlertPopUp from '../../../../Common/AlertPopUp';
import Alert from '../../../../../assets/images/alert.png';
// import stylesheet.
import styles from '../styles';

export default class page6 extends Component {
    constructor(props) {
        super(props);

        // local state not affected by redux
        this.state = {
            showPublicKeyInfoPopUp: false,
            showPersonInfoPopUp: false,
        }
    }
    publicKeyInfoPopUp = () => {
        return (
            <View>
                <Text style={styles.PageStyle.popUpTextStyle}>
                    Since a public key is no longer in a superincreasing sequence,
                    there are multiple solutions to a single ciphertext therefore
                    making it difficult to decipher.
                </Text>
            </View>
        )
    }
    personInfoPopUp = () => {
        return (
            <View>
                <Text style={styles.PageStyle.popUpTextStyle}>
                    This person will then encrypt his message using the public key and
                    send it back to the owner.
                </Text>
            </View>
        )
    }
    render() {
        const {
            showPublicKeyInfoPopUp,
            showPersonInfoPopUp,
        } = this.state
        let style = styles.PageStyle
        return (
            <View style={style.containerStyle}>
                {
                    showPublicKeyInfoPopUp
                        ? <AlertPopUp
                            icon={Alert}
                            renderedBlocks={this.publicKeyInfoPopUp()}
                            callback={() => { this.setState({ showPublicKeyInfoPopUp: false, }) }}
                            visibility={showPublicKeyInfoPopUp} />
                        : null
                }
                {
                    showPersonInfoPopUp
                        ? <AlertPopUp
                            icon={Alert}
                            renderedBlocks={this.personInfoPopUp()}
                            callback={() => { this.setState({ showPersonInfoPopUp: false, }) }}
                            visibility={showPersonInfoPopUp} />
                        : null
                }
                <Text style={style.titleStyle}>Introduction</Text>
                <Text style={style.contentHead}>Trapdoor Knapsack Description</Text>

                <Text style={style.contentStyle}>
                    A <Text style={style.publicKey} onPress={() => { this.setState({ showPublicKeyInfoPopUp: true, }) }}>
                        public key
                    </Text> is generated by multiplying each element of the <Text style={style.superIncreasingKnapsack}>
                        superincreasing knapsack
                    </Text> with the <Text style={style.multiplier}>multiplier</Text> and <Text style={style.modulus}>
                        modulus
                    </Text> to get a difficult knapsack.
                    {"\n\n"}

                    This <Text style={style.publicKey}>
                        public key
                    </Text> is then given to a <Text style={style.links} onPress={() => { this.setState({ showPersonInfoPopUp: true, }) }}>
                        person
                    </Text> who wishes to send an encrypted text to the owner.
                    {"\n\n"}
                    
                    The owner with the <Text style={style.privateKey}>private key</Text> will be able to decrypt and get the original message.
                    {"\n\n"}

                    A detailed example will be given as you progress further.
                    {"\n"}
                </Text>
            </View>
        )
    }
}
